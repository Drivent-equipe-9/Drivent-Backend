// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session      Session[]
  Enrollment   Enrollment[]
  Payment      Payment[]
  Reservation  Reservation[]
  ActivityUser ActivityUser[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Activity {
  id        Int      @id @default(autoincrement())
  eventId   Int
  date      DateTime @db.Date
  location  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  startsAt  String
  endsAt    String
  vacancies Int

  ActivityUser ActivityUser[]

  @@index([date(sort: Asc)])
}

model ActivityUser {
  id         Int @id @default(autoincrement())
  activityId Int
  userId     Int

  Activity Activity @relation(fields: [activityId], references: [id])
  User     User     @relation(fields: [userId], references: [id])
}

model Hotel {
  id               Int    @id @default(autoincrement())
  name             String @db.VarChar(255)
  imageUrl         String @db.VarChar(255)
  accomodationType String @db.VarChar(255)

  Room        Room[]
  Reservation Reservation[]
}

model Room {
  id               Int     @id @default(autoincrement())
  hotelId          Int
  number           String
  accomodationType String  @db.VarChar(255)
  isVacant         Boolean @default(true)
  vacanciesLeft    Int

  Hotel       Hotel         @relation(fields: [hotelId], references: [id])
  Reservation Reservation[]

  @@index([hotelId])
}

model Reservation {
  id      Int @id @default(autoincrement())
  userId  Int
  roomId  Int
  hotelId Int

  User  User  @relation(fields: [userId], references: [id])
  Room  Room  @relation(fields: [roomId], references: [id])
  Hotel Hotel @relation(fields: [hotelId], references: [id])
}

model Ticket {
  id                Int     @id @default(autoincrement())
  eventId           Int
  enrollmentId      Int
  isOnline          Boolean
  withAccommodation Boolean
  totalPrice        Int

  Enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
  Payment    Payment[]
}

model Payment {
  id       Int     @id @default(autoincrement())
  ticketId Int     @unique
  userId   Int     @unique
  isPaid   Boolean @default(false)

  Ticket Ticket @relation(fields: [ticketId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  cpf       String   @db.VarChar(255)
  birthday  DateTime
  phone     String   @db.VarChar(255)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User      @relation(fields: [userId], references: [id])
  Ticket  Ticket[]
  Address Address[]
}

model Address {
  id            Int      @id @default(autoincrement())
  cep           String   @db.VarChar(255)
  street        String   @db.VarChar(255)
  city          String   @db.VarChar(255)
  state         String   @db.VarChar(255)
  number        String   @db.VarChar(255)
  neighborhood  String   @db.VarChar(255)
  addressDetail String?  @db.VarChar(255)
  enrollmentId  Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
}
